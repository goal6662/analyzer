# 判断条件
<judge> -> <
<judge> -> >
<judge> -> ==
<judge> -> <=
<judge> -> >=
<judge> -> !=
# 表达式 暂不支持字符串
<expression> -> (<expression>)
<expression> -> <constant><constant@>
<expression> -> <identifier><exp_@>
<exp_@> -> <operator><expression>
<exp_@> -> ε
<constant@> -> <operator><expression>
<constant@> -> ε

# 语句体
<body> -> {<statements>}


# 条件语句
<condition> -> (<condition_ext>)
<condition_ext> -> <constant><judge><constant>
<condition_ext> -> <identifier><judge><constant>

<start> -> <project>
<project> -> <statements>
<project> -> <modifier><function>


# 方法
# 声名
<function> -> <pair>(<param>)<body>
<param> -> <type><type@>
<type@> -> <identifier><identifier@>
<identifier@> -> ,<param>
<identifier@> -> ε
<param> -> ε

# 常见的声名语句
<pair> -> <type><identifier>

# 语句
<statements> -> <statement><statements>
<statements> -> ε

# 声名语句
<statement> -> <pair><pair_state>;
# 声名兼赋值
<pair_state> -> =<expression>
<pair_state> -> ε

# 赋值语句
<statement> -> <assign>
<assign> -> <identifier><identifier@><expression>;
# 正常赋值
<identifier@> -> =
# 语法糖
<identifier@> -> +=
<identifier@> -> -=
<identifier@> -> *=
<identifier@> -> /=
<identifier@> -> %=
<identifier@> -> &=
<identifier@> -> |=
<identifier@> -> ^=

# 条件判断
<statement> -> if<if_state>
<if_state> -> <condition><body><else_state>
<else_state> -> else<body>
<else_state> -> ε

# 循环
<statement> -> while<condition><body>

# 结束符
<end> -> ;
# 返回
<statement> -> return<constant><end>
# <statement> -> return<end>
# 跳过
<statement> -> continue<end>
# 结束
<statement> -> break<end>
